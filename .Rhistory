summary(test)
df2 <- summary(test)
str(df2)
attr(df2, "test")
attr(df2, "units")
source('~/GitHub/RcppClock/R/RcppClock.R')
test
plot(test)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot(test)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot(test)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot(test)
source('~/GitHub/RcppClock/R/RcppClock.R')
library(testthat)
usethis::use_testthat()
df <- clock_fibonacci(n = c(20, 25, 30), reps = 10)
df
devtools::document()
rm(list = ls())
clock_fibonacci(n = c(20, 25, 30))
devtools::document()
?fibonacci_timer
fibonacci_timer(c(25, 30, 35), reps = 10)
devtools::document()
?fibonacci_timer
fibonacci_timer(c(25, 30, 35), reps = 10)
# creates global environment variable "fibonacci_timer" with results
fibonacci_timer
autoplot(fibonacci_timer)
x <- fibonacci_timer
x
print(x)
print.RcppClock(x)
plot(x)
plot.RcppClock(x)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot.RcppClock(x)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot.RcppClock(x)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot.RcppClock(x)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot.RcppClock(x)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot.RcppClock(x)
plot.RcppClock(x)
plot(x)
x
rm(list = ls())
devtools::document()
?fibonacci_timer
fibonacci_timer(c(25, 30, 35), reps = 10)
# creates global environment variable "fibonacci_timer" with results
fibonacci_timer
print(fibonacci_timer)
?RcppClock
source('~/GitHub/RcppClock/R/RcppClock.R')
devtools::document()
source('~/GitHub/RcppClock/R/RcppClock.R')
devtools::document()
rm(list = ls())
devtools::document()
?fibonacci_timer
fibonacci_timer(c(25, 30, 35), reps = 10)
# creates global environment variable "fibonacci_timer" with results
fibonacci_timer
?fibonacci_timer
fibonacci_timer(c(20, 25, 30))
devtools::document()
fibonacci_timer(c(20, 25, 30))
fibonacci_timer
plot(fibonacci_timer)
fibonacci_timer(c(20, 25, 30), 100)
plot(fibonacci_timer)
fibonacci_timer
colnames(fibonacci_timer)
str(fibonacci_timer)
fibonacci_timer(n = c(25, 30, 35), reps = 10)
s <- summary(fibonacci_timer)
s
str(s)
colnames(s)
colnames(s) == c("ticker", "mean", "sd", "min", "max", "neval")
all(colnames(s) == c("ticker", "mean", "sd", "min", "max", "neval"))
expect_equal(all(s$neval == 10), TRUE)
expect.equal(sum(is.na(s)) == 0)
sum(is.na(s)) == 0
is.na(s)
all(!is.na(s))
expect.equal(all(!is.na(s)), TRUE)
?fibonacci_timer
devtools::document()
fibonacci_timer(n = c(25, 30, 35), reps = 10)
s <- summary(fibonacci_timer)
expect_equal(all(colnames(s) == c("ticker", "mean", "sd", "min", "max", "neval")), TRUE)
expect_equal(all(s$neval == 10), TRUE)
expect.equal(all(!is.na(s)), TRUE)
fibonacci_timer(n = c(25, 30, 35), reps = 10)
s <- summary(fibonacci_timer)
expect_equal(all(colnames(s) == c("ticker", "mean", "sd", "min", "max", "neval")), TRUE)
expect_equal(all(s$neval == 10), TRUE)
expect_equal(all(!is.na(s)), TRUE)
summary(fibonacci_timer)
devtools::document()
fibonacci_timer(n = c(25, 30, 35), reps = 10)
s <- summary(times)
expect_equal(all(colnames(s) == c("ticker", "mean", "sd", "min", "max", "neval")), TRUE)
expect_equal(all(s$neval == 10), TRUE)
expect_equal(all(!is.na(s)), TRUE)
fibonacci_timer(n = c(25, 30, 35), reps = 10)
rm(list = ls())
Rcpp::sourceCpp('src/fibonacci_timer.cpp')
fibonacci_timer(c(25, 30, 35))
devtools::document()
rm(list = ls())
devtools::document()
fibonacci_timer(n = c(25, 30, 35), reps = 10)
s <- summary(times)
expect_equal(all(colnames(s) == c("ticker", "mean", "sd", "min", "max", "neval")), TRUE)
expect_equal(all(s$neval == 10), TRUE)
expect_equal(all(!is.na(s)), TRUE)
fibonacci_timer(n = c(25, 30, 35), reps = 10)
devtools::document()
library(testthat)
fibonacci_timer(n = c(25, 30, 35), reps = 10)
?fibonacci_timer
fibonacci_timer(c(25, 30, 35), reps = 10)
# creates global environment variable "times" with results
times
autoplot(times)
fibonacci_timer(c(25, 30, 35), reps = 10)
Rcpp::sourceCpp('src/fibonacci_timer.cpp')
fibonacci_timer(c(25, 30, 35), reps = 10)
Rcpp::sourceCpp('src/fibonacci_timer.cpp')
devtools::document()
devtools::document()
rm(list = ls())
devtools::document()
fibonacci_timer()
devtools::document()
devtools::document()
?fibonacci_timer
fibonacci_timer(c(25, 30, 35), reps = 10)
devtools::document()
fibonacci_timer()
devtools::document()
fibonacci_timer()
fibonacci_timer(c(25, 30, 35), 10)
devtools::document()
fibonacci_timer(c(25, 30, 35), 10)
devtools::document()
devtools::document()
devtools::document()
fibonacci_timer(c(25, 30, 35), 10)
devtools::document()
fibonacci_timer(c(25, 30, 35), 10)
devtools::document()
devtools::document()
fibonacci(c(25, 30, 35), 10)
clock
autoplot(clock)
plot(clock)
?fibonacci
?RcppClock
?fibonacci
devtools::document()
?RcppClock
devtools::document()
?RcppClock
devtools::document()
?RcppClock
devtools::document()
?RcppClock
library(RcppClock)
fibonacci(n = c(20, 25, 30, 35), reps = 10)
# this function creates a global environment variable "clock"
#   that is an S3 RcppClock object
clock
plot(clock)
summary(clock, units = "ms")
library(RcppClock)
fibonacci(n = 25:35, reps = 10)
# this function creates a global environment variable "clock"
#   that is an S3 RcppClock object
clock
plot(clock)
summary(clock, units = "ms")
devtools::document()
?RcppClock
?fibonacci
Rcpp::sourceCpp('C:/Users/Owner/Desktop/test.cpp')
devtools::install_github("zdebruine/RcppClock")
library(RcppClock)
?RcppClock
?RcppClock
library(RcppClock)
?RcppClock
?fibonacci
fibonacci(n = c(25:35), reps = 10)
# this function creates a global environment variable "clock"
#   that is an S3 RcppClock object
clock
plot(clock)
summary(clock, units = "ms")
getwd()
devtools::document()
?fibonacci
?RcppClock
devtools::document()
?RcpClock
?RcppClock
?fibonacci
fibonacci(n = c(25:35), reps = 10)
# this function creates a global environment variable "clock"
#   that is an S3 RcppClock object
clock
plot(clock)
summary(clock, units = "ms")
plot(clock)
summary(clock, units = "us")
summary(clock, units = "ns")
summary(clock, units = "s")
summary(clock, units = "ms")
?RcppClock
library(RcppClock)
fibonacci(n = 25:35, reps = 10)
# this function creates a global environment variable "clock"
#   that is an S3 RcppClock object
clock
plot(clock)
summary(clock, units = "ms")
devtools::document()
devtools::install_github("zdebruine/RcppClock")
Rcpp::sourceCpp('src/fibonacci.cpp')
Rcpp::sourceCpp('src/fibonacci.cpp')
Rcpp::sourceCpp('src/fibonacci.cpp')
Rcpp::sourceCpp('src/fibonacci.cpp')
Rcpp::sourceCpp('src/fibonacci.cpp')
fibonacci(28:32)
Rcpp::sourceCpp('src/fibonacci.cpp')
fibonacci(28:32)
Rcpp::sourceCpp('src/fibonacci.cpp')
fibonacci(28:32)
str(times)
library(RcppClock)
fibonacci
times
plot(times)
str(times)
times$timer
plot(fibonacci(c(20, 35, 30)))
fibonacci(c(20, 35, 30))
plot(times)
fibonacci(c(20, 35, 30, 25, 28, 32))
plot(times)
Rcpp::sourceCpp('src/fibonacci.cpp')
fibonacci(c(20, 35, 30, 25, 28, 32))
plot(times)
times
str(times)
summary(times)
df <- summary(times)
df
str(df)
df
devtools::document()
rm(list = ls())
?fibonacci
fibonacci(n = c(25:35), reps = 10)
# this function creates a global environment variable "clock"
#   that is an S3 RcppClock object
clock
plot(clock)
summary(clock, units = "ms")
Rcpp::sourceCpp('src/fibonacci.cpp')
devtools::document()
fibonacci(n = c(25:35), reps = 10)
# this function creates a global environment variable "clock"
#   that is an S3 RcppClock object
clock
plot(clock)
summary(clock, units = "ms")
Rcpp::sourceCpp('src/fibonacci.cpp')
?fibonacci
fibonacci(n = c(25:35), reps = 10)
# this function creates a global environment variable "clock"
#   that is an S3 RcppClock object
clock
plot(clock)
summary(clock, units = "ms")
rm(list = ls())
fibonacci(n = c(25:35), reps = 10)
# this function creates a global environment variable "clock"
#   that is an S3 RcppClock object
clock
plot(clock)
summary(clock, units = "ms")
?RcppClock
library(RcppClock)
fibonacci(n = 25:35, reps = 10)
# this function creates a global environment variable "clock"
#   that is an S3 RcppClock object
clock
plot(clock)
summary(clock, units = "ms")
fibonacci(n = c(25, 30, 35), reps = 10)
s <- summary(clock)
s
expect_equal(all(colnames(s) == c("ticker", "mean", "sd", "min", "max", "neval")), TRUE)
expect_equal(all(s$neval == 10), TRUE)
expect_equal(all(!is.na(s)), TRUE)
library(testthat)
expect_equal(all(colnames(s) == c("ticker", "mean", "sd", "min", "max", "neval")), TRUE)
expect_equal(all(s$neval == 10), TRUE)
expect_equal(all(!is.na(s)), TRUE)
?RcppClock
devtools::document()
devtools::document()
?summary
?RcppClock
devtools::document()
devtools::install_github("zdebruine/RcppClock")
library(RcppClock)
Rcpp::sourceCpp('C:/Users/Owner/Desktop/test.cpp')
sleepy()
naptimes
plot(naptimes)
summary(naptimes, units = "us")
Rcpp::sourceCpp('C:/Users/Owner/Desktop/test.cpp')
Rcpp::sourceCpp('C:/Users/Owner/Desktop/test.cpp')
fibonacci(n = 25:35, reps = 10)
# global variable "clock" is created in the R global environment
clock
plot(clock)
devtools::document()
?aggregate
Rcpp::sourceCpp('src/fibonacci.cpp')
?fibonacci
library(RcppClock)
?fibonacci
fibonacci(n = c(25:35), reps = 10)
x <- clock
object <- clock
?RcppClock
units <- "auto"
min_time <- min(object$timer[object$timer != 0])
if(is.na(min_time)) min_time <- 0
if(units == "auto"){
if(min_time > 1e8){
units <- "s"
} else if(min_time > 1e5){
units <- "ms"
} else if(min_time > 1e2){
units <- "us"
} else {
units <- "ns"
}
}
if(units == "s"){
object$timer <- object$timer / 1e9
} else if (units == "ms") {
object$timer <- object$timer / 1e6
} else if (units == "us") {
object$timer <- object$timer / 1e3
}
# summarize results
object <- data.frame("timer" = object$timer, "ticker" = object$ticker)
units
df2 <- aggregate(timer~ticker, object, mean)
df2
dim(object)
head(object)
?aggregate
df2 <- aggregate(object$timer, object$ticker, mean)
df2 <- aggregate(object$timer, list(ticker = object$ticker), mean)
df2
colnames(df2)[2] <- "mean"
df2$sd <- aggregate(object$timer, list(ticker = object$ticker), sd)$x
df2$min <- aggregate(object$timer, list(ticker = object$ticker), min)$x
df2$max <- aggregate(object$timer, list(ticker = object$ticker), max)$x
df2
object$timer <- 1
df2$neval <- aggregate(object$timer, list(ticker = object$ticker), sum)$x
df2
long_units <- c("seconds", "milliseconds", "microseconds", "nanoseconds")
short_units <- c("s", "ms", "us", "ns")
attr(df2, "units") <- long_units[which(short_units == units)]
df2
devtools::document()
source('~/GitHub/RcppClock/R/RcppClock.R')
devtools::document()
source('~/GitHub/RcppClock/R/RcppClock.R')
object
x
plot(x)
library(ggplot2)
plot(x)
library(devtools)
document()
getwd()
devtools::document()
devtools::document()
devtools::document()
?RcppClock
src <- "
//[[Rcpp::depends(RcppClock)]]
#include <RcppClock.h>
int fib(int n) {
return ((n <= 1) ? n : fib(n - 1) + fib(n - 2));
}
//[[Rcpp::export]]
void fibonacci(std::vector<int> n, int reps = 10) {
Rcpp::Clock clock;
while(reps-- > 0){
for(auto number : n){
clock.tick("fib" + std::to_string(number));
fib(number);
clock.tock("fib" + std::to_string(number));
}
}
clock.write("clock");
}"
src <- '
//[[Rcpp::depends(RcppClock)]]
#include <RcppClock.h>
int fib(int n) {
return ((n <= 1) ? n : fib(n - 1) + fib(n - 2));
}
//[[Rcpp::export]]
void fibonacci(std::vector<int> n, int reps = 10) {
Rcpp::Clock clock;
while(reps-- > 0){
for(auto number : n){
clock.tick("fib" + std::to_string(number));
fib(number);
clock.tock("fib" + std::to_string(number));
}
}
clock.write("clock");
}'
src
sourceCpp(code = src)
library(RcppClock)
sourceCpp(code = src)
src <- '
//[[Rcpp::depends(RcppClock)]]
int fib(int n) {
return ((n <= 1) ? n : fib(n - 1) + fib(n - 2));
}
//[[Rcpp::export]]
void fibonacci(std::vector<int> n, int reps = 10) {
Rcpp::Clock clock;
while(reps-- > 0){
for(auto number : n){
clock.tick("fib" + std::to_string(number));
fib(number);
clock.tock("fib" + std::to_string(number));
}
}
clock.write("clock");
}'
sourceCpp(code = src)
src <- '
//[[Rcpp::depends(RcppClock)]]
#include <Rcpp.h>
int fib(int n) {
return ((n <= 1) ? n : fib(n - 1) + fib(n - 2));
}
//[[Rcpp::export]]
void fibonacci(std::vector<int> n, int reps = 10) {
Rcpp::Clock clock;
while(reps-- > 0){
for(auto number : n){
clock.tick("fib" + std::to_string(number));
fib(number);
clock.tock("fib" + std::to_string(number));
}
}
clock.write("clock");
}'
sourceCpp(code = src)
source('~/GitHub/RcppClock/R/RcppClock.R')
src <- '
//[[Rcpp::depends(RcppClock)]]
#include <Rcpp.h>
#include <RcppClock.h>
int fib(int n) {
return ((n <= 1) ? n : fib(n - 1) + fib(n - 2));
}
//[[Rcpp::export]]
void fibonacci(std::vector<int> n, int reps = 10) {
Rcpp::Clock clock;
while(reps-- > 0){
for(auto number : n){
clock.tick("fib" + std::to_string(number));
fib(number);
clock.tock("fib" + std::to_string(number));
}
}
clock.write("clock");
}'
sourceCpp(code = src)
source('~/GitHub/RcppClock/R/RcppClock.R')
devtools::document()
rm(list = ls())
devtools::document()
?RcppClock
Rcpp::sourceCpp('C:/Users/Owner/Desktop/test2.cpp')
library(RcppClock)
Rcpp::sourceCpp('C:/Users/Owner/Desktop/test2.cpp')
