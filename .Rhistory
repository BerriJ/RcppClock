object
source('~/GitHub/RcppClock/R/RcppClock.R')
object
getOption("max.print")
autoplot(df2)
autoplot(object)
library(ggplot2)
autoplot(object)
class(object)
isS4(object)
autoplot(x)
library(ggplot2)
source('~/GitHub/RcppClock/R/RcppClock.R')
autoplot(x)
source('~/GitHub/RcppClock/R/RcppClock.R')
autoplot(x)
source('~/GitHub/RcppClock/R/RcppClock.R')
autoplot(x)
source('~/GitHub/RcppClock/R/RcppClock.R')
autoplot(x)
source('~/GitHub/RcppClock/R/RcppClock.R')
x
object
autoplot(object)
source('~/GitHub/RcppClock/R/RcppClock.R')
autoplot(object)
source('~/GitHub/RcppClock/R/RcppClock.R')
source('~/GitHub/RcppClock/R/RcppClock.R')
autoplot(object)
min(object@times)
source('~/GitHub/RcppClock/R/RcppClock.R')
autoplot(object)
source('~/GitHub/RcppClock/R/RcppClock.R')
autoplot(object)
source('~/GitHub/RcppClock/R/RcppClock.R')
source('~/GitHub/RcppClock/R/RcppClock.R')
autoplot(object)
source('~/GitHub/RcppClock/R/RcppClock.R')
autoplot(object)
source('~/GitHub/RcppClock/R/RcppClock.R')
autoplot(object)
Rcpp::sourceCpp('src/fibonacci_example.cpp')
clock_fibonacci(10)
?autoplot
Rcpp::sourceCpp('C:/Users/Owner/Desktop/fibonacci_example.cpp')
devtools::document()
devtools::document()
devtools::document()
pkgbuild::compile_dll()
devtools::document()
getLoadedDLLs()
Rcpp::sourceCpp('src/fibonacci.cpp')
Rcpp::sourceCpp('src/fibonacci.cpp')
devtools::document()
Rcpp::sourceCpp('src/fibonacci.cpp')
devtools::document()
Rcpp::sourceCpp('src/fibonacci.cpp')
devtools::document()
.Last.error.trace
devtools::document()
devtools::document()
rm(list = ls())
devtools::document()
devtools::document()
?plot
?plot
devtools::document(())
devtools::document()
rm(list = ls())
devtools::document()
devtools::document()
devtools::document()
clock_fibonacci(10)
Rcpp::sourceCpp('src/fibonacci.cpp')
clock_fibonacci(10)
devtools::document()
devtools::document()
Rcpp::sourceCpp('src/fibonacci.cpp')
?RcppClock
devtools::document()
Rcpp::sourceCpp('src/fibonacci.cpp')
devtools::document()
?clock_fibonacci
clock_fibonacci(25, 1)
clock_fibonacci(25, 3)
Rcpp::sourceCpp('src/fibonacci.cpp')
clock_fibonacci(20, 3)
a <- clock_fibonacci(20, 3)
str(a)
a@names
Rcpp::sourceCpp('src/fibonacci.cpp')
Rcpp::sourceCpp('src/fibonacci.cpp')
a <- clock_fibonacci(20, 3)
str(a)
a
Rcpp::sourceCpp('src/fibonacci.cpp')
a <- clock_fibonacci(10, 3)
str(a)
a@times
a@names
Rcpp::sourceCpp('src/fibonacci.cpp')
a <- clock_fibonacci(10, 3)
str(a)
str(new("RcppClock"))
Rcpp::sourceCpp('src/fibonacci.cpp')
a <- clock_fibonacci()
a
str(a)
str(a@times)
Rcpp::sourceCpp('src/fibonacci.cpp')
str(a@times)
a <- clock_fibonacci()
str(a)
a
a
devtools::document()
a
autoplot(a)
Rcpp::sourceCpp('src/fibonacci.cpp')
a <- clock_fibonacci()
str(a)
a@times
autoplot(a)
a
devtools::document()
autoplot(a)
a
Rcpp::sourceCpp('src/fibonacci.cpp')
clock_fibonacci(seq(5, 35, 5))
t <- clock_fibonacci(seq(10, 40, 5))
t
autoplot(t)
t
?clock_fibonacci
Rcpp::sourceCpp('src/fibonacci.cpp')
t <- clock_fibonacci(seq(10, 35, 5))
devtools::document()
rm(list = ls())
devtools::document()
Rcpp::sourceCpp('src/fibonacci.cpp')
devtools::document()
rm(list = ls())
devtools::document()
library(usethis)
usethis::use_vignette()
usethis::use_vignette("RcppClock")
?RcppClock
a
devtools::document()
x <- c("1", "2", "3")
env()
env(a = c("2", "3"))
library(rlang)
env(a = c("2", "3"))
env <- env(a = c("2", "3"))
env
Sys.setenv(y = c("3", "4"))
?Sys.setenv
Sys.setenv(list("a" = c("b", "c")))
Sys.setenv("a" = c("b", "c"))
Sys.setenv("a")
Sys.setenv(R_TEST = "testit", "A+C" = 123)
Sys.setenv("Test" = TRUE)
Sys.setenv("Test" = TRUE)
Sys.getenv("Test")
Sys.setenv(TODAY = "S")
Sys.getenv()
?Sys.setenv
?Environment
?Sys.getenv
devtools::document()
Rcpp::sourceCpp('src/RcppClock.cpp')
Rcpp::sourceCpp('src/RcppClock.cpp')
Rcpp::sourceCpp('src/RcppClock.cpp')
Rcpp::sourceCpp('src/RcppClock.cpp')
Rcpp::sourceCpp('src/RcppClock.cpp')
Rcpp::sourceCpp('src/RcppClock.cpp')
Rcpp::sourceCpp('src/RcppClock.cpp')
Rcpp::sourceCpp('src/RcppClock.cpp')
clock_fibonacci(c(10, 20, 30))
devtools::document()
clock_fibonacci(c(10, 20, 30))
rm(list = ls())
clock_fibonacci(c(10, 20, 30))
str(RcppClock)
RcppClock
Rcpp::sourceCpp('src/RcppClock.cpp')
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
clock_fibonacci(c(10, 20, 30))
rm(list = ls())
devtools::document()
clock_fibonacci(c(20, 25, 30, 35), 10)
test
Rcpp::sourceCpp('src/RcppClock.cpp')
clock_fibonacci(c(20, 25, 30, 35), 10)
test
Rcpp::sourceCpp('src/RcppClock.cpp')
clock_fibonacci(c(20, 25, 30, 35), 10)
test
class(test)
Rcpp::sourceCpp('src/RcppClock.cpp')
library(microbenchmark)
mb <- microbenchmark(runif(10000), runif(1000))
mb
source('~/GitHub/RcppClock/R/RcppClock.R')
Rcpp::sourceCpp('src/RcppClock.cpp')
rm(list = ls())
devtools::document()
source('~/GitHub/RcppClock/R/RcppClock.R')
devtools::document()
rm(list = ls())
devtools::document()
clock_fibonacci(20, 30)
clock_fibonacci(c(20, 30))
test
summary(test)
str(test)
summary.RcppClock(test)
source('~/GitHub/RcppClock/R/RcppClock.R')
summary.RcppClock(test)
source('~/GitHub/RcppClock/R/RcppClock.R')
summary.RcppClock(test)
source('~/GitHub/RcppClock/R/RcppClock.R')
summary.RcppClock(test)
source('~/GitHub/RcppClock/R/RcppClock.R')
summary.RcppClock(test)
x <- test
min_time <- min(x$timer[x$timer != 0])
if(is.na(min_time)) min_time <- 0
if(units == "auto"){
if(min_time > 1e9){
units <- "s"
} else if(min_time > 1e6){
units <- "ms"
} else if(min_time > 1e3){
units <- "us"
} else {
units <- "ns"
}
}
if(units == "s"){
x$timer <- x$timer / 1e9
} else if (units == "ms") {
x$timer <- x$timer / 1e6
} else if (units == "us") {
x$timer <- x$timer / 1e3
}
# summarize results
x <- data.frame("timer" = x$timer, "ticker" = x$ticker)
df2 <- aggregate(timer~ticker, x, mean)
df2$
df2$sd <- aggregate(timer~ticker, x, sd)
df2$min <- aggregate(timer~ticker, x, min)
df2$min <- aggregate(timer~ticker, x, max)
x$timer <- 1
df2$max <- aggregate(timer~ticker, x, sum)
df2
aggregate(ticker~timer, x, mean)
x
clock_fibonacci(c(25, 30, 35))
test
str(test)
x <- test
min_time <- min(x$timer[x$timer != 0])
if(is.na(min_time)) min_time <- 0
if(units == "auto"){
if(min_time > 1e9){
units <- "s"
} else if(min_time > 1e6){
units <- "ms"
} else if(min_time > 1e3){
units <- "us"
} else {
units <- "ns"
}
}
if(units == "s"){
x$timer <- x$timer / 1e9
} else if (units == "ms") {
x$timer <- x$timer / 1e6
} else if (units == "us") {
x$timer <- x$timer / 1e3
}
# summarize results
x <- data.frame("timer" = x$timer, "ticker" = x$ticker)
df2 <- aggregate(timer~ticker, x, mean)
units <- "auto"
min_time <- min(x$timer[x$timer != 0])
if(is.na(min_time)) min_time <- 0
if(units == "auto"){
if(min_time > 1e9){
units <- "s"
} else if(min_time > 1e6){
units <- "ms"
} else if(min_time > 1e3){
units <- "us"
} else {
units <- "ns"
}
}
if(units == "s"){
x$timer <- x$timer / 1e9
} else if (units == "ms") {
x$timer <- x$timer / 1e6
} else if (units == "us") {
x$timer <- x$timer / 1e3
}
# summarize results
x <- data.frame("timer" = x$timer, "ticker" = x$ticker)
df2 <- aggregate(timer~ticker, x, mean)
df2
df2$sd <- aggregate(timer~ticker, x, sd)
df2$min <- aggregate(timer~ticker, x, min)
df2$min <- aggregate(timer~ticker, x, max)
df2
aggregate(timer~ticker, x, sd)
df2 <- aggregate(timer~ticker, x, mean)
df2$sd <- aggregate(timer~ticker, x, sd)$timer
df2$min <- aggregate(timer~ticker, x, min)$timer
df2$min <- aggregate(timer~ticker, x, max)$timer
df2
df2 <- aggregate(timer~ticker, x, mean)
df2$sd <- aggregate(timer~ticker, x, sd)$timer
df2$min <- aggregate(timer~ticker, x, min)$timer
df2$max <- aggregate(timer~ticker, x, max)$timer
df2
source('~/GitHub/RcppClock/R/RcppClock.R')
source('~/GitHub/RcppClock/R/RcppClock.R')
df2 <- aggregate(timer~ticker, x, mean)
colnames(df2)[2] <- "mean"
df2$sd <- aggregate(timer~ticker, x, sd)$timer
df2$min <- aggregate(timer~ticker, x, min)$timer
df2$max <- aggregate(timer~ticker, x, max)$timer
df
df2
x$timer <- 1
df2$neval <- aggregate(timer~ticker, x, sum)$timer
df2
source('~/GitHub/RcppClock/R/RcppClock.R')
x
clock_fibonacci(c(25, 30, 35))
test
summary(test)
?attr
attr(test, "units") <- "ms"
test
str(test)
source('~/GitHub/RcppClock/R/RcppClock.R')
test
summary(test)
df2 <- summary(test)
str(df2)
attr(df2, "test")
attr(df2, "units")
source('~/GitHub/RcppClock/R/RcppClock.R')
test
plot(test)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot(test)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot(test)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot(test)
source('~/GitHub/RcppClock/R/RcppClock.R')
library(testthat)
usethis::use_testthat()
df <- clock_fibonacci(n = c(20, 25, 30), reps = 10)
df
devtools::document()
rm(list = ls())
clock_fibonacci(n = c(20, 25, 30))
devtools::document()
?fibonacci_timer
fibonacci_timer(c(25, 30, 35), reps = 10)
devtools::document()
?fibonacci_timer
fibonacci_timer(c(25, 30, 35), reps = 10)
# creates global environment variable "fibonacci_timer" with results
fibonacci_timer
autoplot(fibonacci_timer)
x <- fibonacci_timer
x
print(x)
print.RcppClock(x)
plot(x)
plot.RcppClock(x)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot.RcppClock(x)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot.RcppClock(x)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot.RcppClock(x)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot.RcppClock(x)
source('~/GitHub/RcppClock/R/RcppClock.R')
plot.RcppClock(x)
plot.RcppClock(x)
plot(x)
x
rm(list = ls())
devtools::document()
?fibonacci_timer
fibonacci_timer(c(25, 30, 35), reps = 10)
# creates global environment variable "fibonacci_timer" with results
fibonacci_timer
print(fibonacci_timer)
?RcppClock
source('~/GitHub/RcppClock/R/RcppClock.R')
devtools::document()
source('~/GitHub/RcppClock/R/RcppClock.R')
devtools::document()
rm(list = ls())
devtools::document()
?fibonacci_timer
fibonacci_timer(c(25, 30, 35), reps = 10)
# creates global environment variable "fibonacci_timer" with results
fibonacci_timer
?fibonacci_timer
fibonacci_timer(c(20, 25, 30))
devtools::document()
fibonacci_timer(c(20, 25, 30))
fibonacci_timer
plot(fibonacci_timer)
fibonacci_timer(c(20, 25, 30), 100)
plot(fibonacci_timer)
fibonacci_timer
colnames(fibonacci_timer)
str(fibonacci_timer)
fibonacci_timer(n = c(25, 30, 35), reps = 10)
s <- summary(fibonacci_timer)
s
str(s)
colnames(s)
colnames(s) == c("ticker", "mean", "sd", "min", "max", "neval")
all(colnames(s) == c("ticker", "mean", "sd", "min", "max", "neval"))
expect_equal(all(s$neval == 10), TRUE)
expect.equal(sum(is.na(s)) == 0)
sum(is.na(s)) == 0
is.na(s)
all(!is.na(s))
expect.equal(all(!is.na(s)), TRUE)
?fibonacci_timer
devtools::document()
fibonacci_timer(n = c(25, 30, 35), reps = 10)
s <- summary(fibonacci_timer)
expect_equal(all(colnames(s) == c("ticker", "mean", "sd", "min", "max", "neval")), TRUE)
expect_equal(all(s$neval == 10), TRUE)
expect.equal(all(!is.na(s)), TRUE)
fibonacci_timer(n = c(25, 30, 35), reps = 10)
s <- summary(fibonacci_timer)
expect_equal(all(colnames(s) == c("ticker", "mean", "sd", "min", "max", "neval")), TRUE)
expect_equal(all(s$neval == 10), TRUE)
expect_equal(all(!is.na(s)), TRUE)
summary(fibonacci_timer)
devtools::document()
fibonacci_timer(n = c(25, 30, 35), reps = 10)
s <- summary(times)
expect_equal(all(colnames(s) == c("ticker", "mean", "sd", "min", "max", "neval")), TRUE)
expect_equal(all(s$neval == 10), TRUE)
expect_equal(all(!is.na(s)), TRUE)
fibonacci_timer(n = c(25, 30, 35), reps = 10)
rm(list = ls())
Rcpp::sourceCpp('src/fibonacci_timer.cpp')
fibonacci_timer(c(25, 30, 35))
devtools::document()
rm(list = ls())
devtools::document()
fibonacci_timer(n = c(25, 30, 35), reps = 10)
s <- summary(times)
expect_equal(all(colnames(s) == c("ticker", "mean", "sd", "min", "max", "neval")), TRUE)
expect_equal(all(s$neval == 10), TRUE)
expect_equal(all(!is.na(s)), TRUE)
fibonacci_timer(n = c(25, 30, 35), reps = 10)
devtools::document()
library(testthat)
fibonacci_timer(n = c(25, 30, 35), reps = 10)
?fibonacci_timer
fibonacci_timer(c(25, 30, 35), reps = 10)
# creates global environment variable "times" with results
times
autoplot(times)
fibonacci_timer(c(25, 30, 35), reps = 10)
Rcpp::sourceCpp('src/fibonacci_timer.cpp')
fibonacci_timer(c(25, 30, 35), reps = 10)
Rcpp::sourceCpp('src/fibonacci_timer.cpp')
devtools::document()
devtools::document()
rm(list = ls())
devtools::document()
fibonacci_timer()
devtools::document()
devtools::document()
?fibonacci_timer
fibonacci_timer(c(25, 30, 35), reps = 10)
