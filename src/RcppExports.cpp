// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rcpptimer.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fibonacci
std::vector<long int> fibonacci(std::vector<long int> n);
RcppExport SEXP _rcpptimer_fibonacci(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<long int> >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fibonacci(n));
    return rcpp_result_gen;
END_RCPP
}
// fibonacci_omp
std::vector<long int> fibonacci_omp(std::vector<long int> n);
RcppExport SEXP _rcpptimer_fibonacci_omp(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<long int> >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fibonacci_omp(n));
    return rcpp_result_gen;
END_RCPP
}
// test_default
double test_default(double& x, double& y);
RcppExport SEXP _rcpptimer_test_default(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(test_default(x, y));
    return rcpp_result_gen;
END_RCPP
}
// test_update
List test_update();
RcppExport SEXP _rcpptimer_test_update() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_update());
    return rcpp_result_gen;
END_RCPP
}
// test_reset
List test_reset();
RcppExport SEXP _rcpptimer_test_reset() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_reset());
    return rcpp_result_gen;
END_RCPP
}
// test_missings
void test_missings(const bool tic, const bool toc, const bool verbose);
RcppExport SEXP _rcpptimer_test_missings(SEXP ticSEXP, SEXP tocSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const bool >::type tic(ticSEXP);
    Rcpp::traits::input_parameter< const bool >::type toc(tocSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    test_missings(tic, toc, verbose);
    return R_NilValue;
END_RCPP
}
// test_return
DataFrame test_return(const bool autoreturn);
RcppExport SEXP _rcpptimer_test_return(SEXP autoreturnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const bool >::type autoreturn(autoreturnSEXP);
    rcpp_result_gen = Rcpp::wrap(test_return(autoreturn));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rcpptimer_fibonacci", (DL_FUNC) &_rcpptimer_fibonacci, 1},
    {"_rcpptimer_fibonacci_omp", (DL_FUNC) &_rcpptimer_fibonacci_omp, 1},
    {"_rcpptimer_test_default", (DL_FUNC) &_rcpptimer_test_default, 2},
    {"_rcpptimer_test_update", (DL_FUNC) &_rcpptimer_test_update, 0},
    {"_rcpptimer_test_reset", (DL_FUNC) &_rcpptimer_test_reset, 0},
    {"_rcpptimer_test_missings", (DL_FUNC) &_rcpptimer_test_missings, 3},
    {"_rcpptimer_test_return", (DL_FUNC) &_rcpptimer_test_return, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rcpptimer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
