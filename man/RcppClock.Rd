% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppClock.R
\docType{package}
\name{RcppClock}
\alias{RcppClock}
\alias{summary.RcppClock}
\alias{print.RcppClock}
\alias{plot.RcppClock}
\title{RcppClock}
\usage{
\method{summary}{RcppClock}(x, units = "auto")

\method{print}{RcppClock}(x)

\method{plot}{RcppClock}(x)
}
\arguments{
\item{x}{RcppClock object}

\item{units}{nanoseconds (\code{"ns"}), microseconds (\code{"us"}), milliseconds (\code{"ms"}), seconds (\code{"s"}), or auto (\code{"auto"})}
}
\description{
Time Rcpp functions and summarize, print, and plot runtime statistics
}
\section{RcppClock functions}{

See the vignette to learn how to use RcppClock in Rcpp code.

When the Rcpp \verb{Rcpp::clock::write()} method is called in Rcpp code, an S3 \code{RcppClock} object
will be created in the global environment. This object contains three methods:
\itemize{
\item \code{summary}: computes runtime summary statistics and returns a \code{data.frame}
\item \code{print}:  runs \code{summary} and then prints the resulting \code{data.frame}
\item \code{plot}:  a ggplot2 violin plot with jitter points showing runtimes for each expression
}

The \code{\link{fibonacci}} function is a simple example of how to use RcppClock.
See the source code on \code{github.com/zdebruine/RcppClock/src/fibonacci.cpp}
}

\examples{
library(RcppClock)
fibonacci(n = 25:35, reps = 10)
# this function creates a global environment variable "clock"
#   that is an S3 RcppClock object
clock
plot(clock)
summary(clock, units = "ms")
}
\seealso{
\code{\link{fibonacci}}
}
