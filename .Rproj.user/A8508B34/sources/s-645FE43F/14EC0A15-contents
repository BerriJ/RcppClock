#include <RcppClock.cpp>

// a simple timing example
int fib(int n) {
  return ((n <= 1) ? n : fib(n - 1) + fib(n - 2));
}

//' Simple RcppClock example
//' 
//' Time the computation of fibonacci numbers
//' 
//' @param n vector giving integers for which to compute the fibonacci sum
//' @param reps number of replicates for timing 
//' @export
//' @examples
//' fibonacci(c(25, 30, 35), reps = 10)
//' # creates global environment variable "clock" (S3 RcppClock object) with results
//' clock
//' plot(clock)
//' summary(clock, units = "ms")
//[[Rcpp::export]]
void fibonacci(std::vector<int> n, int reps = 10) {
  Rcpp::Clock clock;
  
  while(reps-- > 0){
    for(auto number : n){
      clock.tick("fib" + std::to_string(number));
      fib(number);
    }
  }
  clock.tock();
  clock.write("clock");
}