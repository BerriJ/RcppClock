[{"path":"https://rcpptimer.berrisch.biz/articles/rcpptimer.html","id":"a-short-introduction-to-rcpptimer","dir":"Articles","previous_headings":"","what":"A Short Introduction to rcpptimer","title":"Introduction","text":"package provides simple timer Rcpp code. similar tictoc R package. Package wraps cpptimer header library contains class called CppTimer. ‘rcpptimer’ adds class Timer Rcpp namespace.","code":""},{"path":"https://rcpptimer.berrisch.biz/articles/rcpptimer.html","id":"basic-usage-of-the-timer-with-rcppcppfunction","dir":"Articles","previous_headings":"A Short Introduction to rcpptimer","what":"Basic usage of the Timer with Rcpp::cppFunction","title":"Introduction","text":"Rcpp::cppFunction add depends argument function. tell compiler want link ‘rcpptimer’ library ‘Rcpp’ code. , can construct instance Timer class use tic toc methods measure time takes execute function. , just allocate memory something measure: results passed R environment dataframe named times. want give dataframe different name can pass name constructor:","code":"Rcpp::cppFunction(' int mem() {   Rcpp::Timer timer;   timer.tic(\"mem\");   std::string s;   s.reserve(1048576);   timer.toc(\"mem\");   return(0); }',   depends = \"rcpptimer\" )  mem() #> [1] 0  print(times) #>   Name Milliseconds SD Count #> 1  mem         0.01  0     1 Rcpp::cppFunction(' int mem() {   Rcpp::Timer timer(\"mytimes\");   timer.tic(\"mem\");   std::string s;   s.reserve(1048576);   timer.toc(\"mem\");   return(0); }',   depends = \"rcpptimer\" )  mem() #> [1] 0  print(mytimes) #>   Name Milliseconds SD Count #> 1  mem        0.002  0     1"},{"path":"https://rcpptimer.berrisch.biz/articles/rcpptimer.html","id":"warnings-and-how-to-disable-them","dir":"Articles","previous_headings":"A Short Introduction to rcpptimer","what":"Warnings and how to disable them","title":"Introduction","text":"default setting warn timers stopped toc calls timers yet started using matching call tic: Note affect correctly terminated timers reserve. warnings occur runtime. Unfortunately, can’t check compile time since tic toc calls might spread various functions (cases) know execution flow upfront. However, sure using timer correctly can disable warnings passing false constructor:","code":"Rcpp::cppFunction(' int mem() {   Rcpp::Timer timer;   timer.tic(\"start\");   std::string s;   timer.tic(\"reserve\");   s.reserve(1048576);   timer.toc(\"reserve\");   timer.toc(\"finish\");   return(0); }',   depends = \"rcpptimer\" )  mem() #> Warning in mem(): Timer \"finish\" not started yet.  #> Use tic(\"finish\") to start the timer. #> Warning in mem(): Timer \"start\" not stopped yet.  #> Use toc(\"start\") to stop the timer. #> [1] 0  print(times) #>      Name Milliseconds SD Count #> 1 reserve        0.001  0     1 Rcpp::cppFunction(' int mem() {   Rcpp::Timer timer(false); // Disable warnings   timer.tic(\"start\");   std::string s;   timer.tic(\"reserve\");   s.reserve(1048576);   timer.toc(\"reserve\");   timer.toc(\"finish\");   return(0); }',   depends = \"rcpptimer\" )  mem() #> [1] 0"},{"path":"https://rcpptimer.berrisch.biz/articles/rcpptimer.html","id":"rcpptimerscopedtimer","dir":"Articles","previous_headings":"A Short Introduction to rcpptimer","what":"Rcpp::Timer::ScopedTimer","title":"Introduction","text":"offer alternative tic-toc interface. ScopedTimer lets measure time takes object go scope. can adjust example use ScopedTimer instead: Note need initialize ScopedTimer. goes scope call timer.toc(\"mem\") automatically. add vignettes use package Rcpp::sourceCpp add package soon.","code":"Rcpp::cppFunction(' int mem() {   Rcpp::Timer timer;   Rcpp::Timer::ScopedTimer scoped_timer(timer, \"mem\");   std::string s;   s.reserve(1048576);   return(0); }',   depends = \"rcpptimer\" )  mem() #> [1] 0  print(times) #>   Name Milliseconds SD Count #> 1  mem        0.013  0     1"},{"path":"https://rcpptimer.berrisch.biz/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonathan Berrisch. Author, maintainer.","code":""},{"path":"https://rcpptimer.berrisch.biz/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Berrisch J (2024). rcpptimer: 'Rcpp' Tic-Toc Timer 'OpenMP' Support. R package version 1.1.0, https://rcpptimer.berrisch.biz.","code":"@Manual{,   title = {rcpptimer: 'Rcpp' Tic-Toc Timer with 'OpenMP' Support},   author = {Jonathan Berrisch},   year = {2024},   note = {R package version 1.1.0},   url = {https://rcpptimer.berrisch.biz}, }"},{"path":"https://rcpptimer.berrisch.biz/index.html","id":"rcpptimer---rcpp-tic-toc-timer-with-openmp-support","dir":"","previous_headings":"","what":"Rcpp Tic-Toc Timer with OpenMP Support","title":"Rcpp Tic-Toc Timer with OpenMP Support","text":"R Package provides Rcpp bindings cpptimer, simple tic-toc timer class benchmarking C++ code. ’s just simple, ’s blazing fast! sleek tic-toc timer class supports overlapping timers well OpenMP parallelism. boasts microsecond-level time resolution. find overhead timer resolution. Results (summary statistics) automatically passed back R data frame.","code":""},{"path":"https://rcpptimer.berrisch.biz/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Rcpp Tic-Toc Timer with OpenMP Support","text":"Install rcpptimer CRAN.","code":"install.packages(\"rcpptimer\")"},{"path":"https://rcpptimer.berrisch.biz/index.html","id":"the-rcpp-side-of-things","dir":"","previous_headings":"","what":"The Rcpp side of things","title":"Rcpp Tic-Toc Timer with OpenMP Support","text":"Link DESCRIPTION file //[[Rcpp::depends(rcpptimer)]], load header library individual .cpp files #include <rcpptimer.h>. create instance Rcpp::Clock class use: .tic(std::string) start new timer. .toc(std::string) stop timer. Multiple timers name (.e. loop) grouped report Mean Standard Deviation . results automatically passed R timer instance goes scope. don’t need worry return statements.","code":"//[[Rcpp::depends(rcpptimer)]] #include <rcpptimer.h>  std::vector<int> fibonacci(std::vector<int> n) {   Rcpp::Timer timer; // Or Rcpp::Timer timer(\"my_name\"); to assign a custom name   // to the returned dataframe (default is 'times')   timer.tic(\"fib_body\"); // Start timer measuring the whole function   std::vector<int> results = n;    for (int i = 0; i < n.size(); ++i)   {     // Start a timer for each fibonacci number     timer.tic(\"fib_\" + std::to_string(n[i]));     results[i] = fib(n[i]);     // Stop the timer for each fibonacci number     timer.toc(\"fib_\" + std::to_string(n[i]));   }   // Stop the timer measuring the whole function   timer.toc(\"fib_body\");   return (results); }"},{"path":"https://rcpptimer.berrisch.biz/index.html","id":"the-r-side-of-things","dir":"","previous_headings":"","what":"The R side of things","title":"Rcpp Tic-Toc Timer with OpenMP Support","text":"R end, can now observe times object silently passed global environment:","code":"[R] fibonacci(n = rep(10 * (1:4), 10)) [R] times       Name Milliseconds    SD Count 1   fib_10        0.002 0.001    10 2   fib_20        0.048 0.011    10 3   fib_30        5.382 0.070    10 4   fib_40      658.280 1.520    10 5 fib_body     6637.259 0.000     1"},{"path":"https://rcpptimer.berrisch.biz/index.html","id":"openmp-support","dir":"","previous_headings":"","what":"OpenMP Support","title":"Rcpp Tic-Toc Timer with OpenMP Support","text":"Since added OpenMP support, also OpenMP version fibonacci function: Nothing changed respect timer instance. timings show OpenMP version significantly faster (fib_body):","code":"std::vector<int> fibonacci_omp(std::vector<int> n) {    Rcpp::Timer timer;   timer.tic(\"fib_body\");   std::vector<int> results = n;  #pragma omp parallel for   for (int i = 0; i < n.size(); ++i)   {     timer.tic(\"fib_\" + std::to_string(n[i]));     results[i] = fib(n[i]);     timer.toc(\"fib_\" + std::to_string(n[i]));   }   timer.toc(\"fib_body\");   return (results); } Name Milliseconds     SD Count 1   fib_10        0.022  0.031    10 2   fib_20        0.132  0.057    10 3   fib_30        8.728  2.583    10 4   fib_40      779.942 91.569    10 5 fib_body      908.919  0.000     1"},{"path":"https://rcpptimer.berrisch.biz/index.html","id":"scoped-timer","dir":"","previous_headings":"","what":"Scoped Timer","title":"Rcpp Tic-Toc Timer with OpenMP Support","text":"also added new Rcpp::CppTimer::ScopedTimer. can used time lifespan object goes scope. useful timing duration function loop. fibonacci example . However, replace “fib_body” tic-toc timer scoped version. Note can name object (example scpdtmr) however like. Rcpp::CppTimer::ScopedTimer acts wrapper, call .tic upon construction .toc called automatically upon destruction. Rcpp::CppTimer::ScopedTimer useful time duration function loop.","code":"std::vector<int> fibonacci(std::vector<int> n) {   Rcpp::Timer timer;    // This scoped timer measures the total execution time of 'fibonacci'   Rcpp::Timer::ScopedTimer scpdtmr(timer, \"fib_body\");    std::vector<int> results = n;    for (unsigned int i = 0; i < n.size(); ++i)   {     timer.tic(\"fib_\" + std::to_string(n[i]));     results[i] = fib(n[i]);     timer.toc(\"fib_\" + std::to_string(n[i]));   }    return (results); }"},{"path":"https://rcpptimer.berrisch.biz/index.html","id":"limitations","dir":"","previous_headings":"","what":"Limitations","title":"Rcpp Tic-Toc Timer with OpenMP Support","text":"Processes taking less microsecond timed.","code":""},{"path":"https://rcpptimer.berrisch.biz/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Rcpp Tic-Toc Timer with OpenMP Support","text":"package (underlying cpptimer class) inspired zdebruine’s RcppClock. used package lot wanted add OpenMP support, alter process calculating summary statistics, apply series small adjustments. hope find useful.","code":""},{"path":"https://rcpptimer.berrisch.biz/reference/fibonacci.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple rcpptimer example — fibonacci","title":"Simple rcpptimer example — fibonacci","text":"Time computation Fibonacci numbers","code":""},{"path":"https://rcpptimer.berrisch.biz/reference/fibonacci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple rcpptimer example — fibonacci","text":"","code":"fibonacci(n)"},{"path":"https://rcpptimer.berrisch.biz/reference/fibonacci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple rcpptimer example — fibonacci","text":"n vector giving integers compute Fibonacci sum","code":""},{"path":"https://rcpptimer.berrisch.biz/reference/fibonacci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple rcpptimer example — fibonacci","text":"vector integers giving Fibonacci sum element n","code":""},{"path":"https://rcpptimer.berrisch.biz/reference/fibonacci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple rcpptimer example — fibonacci","text":"function timed following: int fib(int n) { return ((n <= 1) ? n : fib(n - 1) + fib(n - 2)); } Runtime computations less n = 15 nearly unmeasurable.","code":""},{"path":"https://rcpptimer.berrisch.biz/reference/fibonacci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple rcpptimer example — fibonacci","text":"","code":"# \\donttest{ fibonacci(n = rep(10*(1:4), 10)) #>  [1]        55      6765    832040 102334155        55      6765    832040 #>  [8] 102334155        55      6765    832040 102334155        55      6765 #> [15]    832040 102334155        55      6765    832040 102334155        55 #> [22]      6765    832040 102334155        55      6765    832040 102334155 #> [29]        55      6765    832040 102334155        55      6765    832040 #> [36] 102334155        55      6765    832040 102334155 # this function creates a global environment variable \"times\" times #>       Name Milliseconds    SD Count #> 1   fib_10        0.001 0.001    10 #> 2   fib_20        0.013 0.001    10 #> 3   fib_30        1.380 0.013    10 #> 4   fib_40      167.062 0.617    10 #> 5 fib_body     1684.608 0.000     1 # }"},{"path":"https://rcpptimer.berrisch.biz/reference/fibonacci_omp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple rcpptimer example using OpenMP — fibonacci_omp","title":"Simple rcpptimer example using OpenMP — fibonacci_omp","text":"Time multithreaded computation Fibonacci numbers","code":""},{"path":"https://rcpptimer.berrisch.biz/reference/fibonacci_omp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple rcpptimer example using OpenMP — fibonacci_omp","text":"","code":"fibonacci_omp(n)"},{"path":"https://rcpptimer.berrisch.biz/reference/fibonacci_omp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple rcpptimer example using OpenMP — fibonacci_omp","text":"n vector giving integers compute Fibonacci sum","code":""},{"path":"https://rcpptimer.berrisch.biz/reference/fibonacci_omp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple rcpptimer example using OpenMP — fibonacci_omp","text":"vector integers giving Fibonacci sum element n","code":""},{"path":"https://rcpptimer.berrisch.biz/reference/fibonacci_omp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple rcpptimer example using OpenMP — fibonacci_omp","text":"function timed following: int fib(int n) { return ((n <= 1) ? n : fib(n - 1) + fib(n - 2)); } Runtime computations less n = 15 nearly unmeasurable.","code":""},{"path":"https://rcpptimer.berrisch.biz/reference/fibonacci_omp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple rcpptimer example using OpenMP — fibonacci_omp","text":"","code":"# \\donttest{ fibonacci_omp(n = rep(10*(1:4), 10)) #>  [1]        55      6765    832040 102334155        55      6765    832040 #>  [8] 102334155        55      6765    832040 102334155        55      6765 #> [15]    832040 102334155        55      6765    832040 102334155        55 #> [22]      6765    832040 102334155        55      6765    832040 102334155 #> [29]        55      6765    832040 102334155        55      6765    832040 #> [36] 102334155        55      6765    832040 102334155 # this function creates a global environment variable \"times\" times #>       Name Milliseconds     SD Count #> 1   fib_10        0.007  0.020    10 #> 2   fib_20        0.026  0.001    10 #> 3   fib_30        2.678  0.093    10 #> 4   fib_40      287.441 55.787    10 #> 5 fib_body      816.357  0.000     1 # }"},{"path":[]},{"path":"https://rcpptimer.berrisch.biz/news/index.html","id":"improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"rcpptimer 1.1.0","text":"Add new Rcpp::CppTimer::ScopedTimer class. can used time lifespan object goes scope. useful timing duration function loop. fibonacci example updated use new class. Warn timers stopped aggregate called (matching toc() statement). Warn timers matching tic() statement found. Add verbose parameter Timer class control whether warnings printed (defaults true). Add introductory vignette package.","code":""},{"path":"https://rcpptimer.berrisch.biz/news/index.html","id":"fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"rcpptimer 1.1.0","text":"led segfault previous version. Fix reset() method working properly cases timers spread multiple methods. Fix non-default constructors Timer class. working properly previous version.","code":""},{"path":"https://rcpptimer.berrisch.biz/news/index.html","id":"rcpptimer-100","dir":"Changelog","previous_headings":"","what":"rcpptimer 1.0.0","title":"rcpptimer 1.0.0","text":"CRAN release: 2024-03-05 initial release rcpptimer. based RcppClock contains number improvements: OpenMP support Auomatically returns results R soon C++ Object goes scope Fast computation Mean Standard Deviation results C++ Uses tic toc instead tick tock consistent R’s tictoc package Allways reports microseconds resolution Many performance improvements","code":""}]
